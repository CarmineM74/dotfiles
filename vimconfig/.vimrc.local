" Configuring Neobundle
if has('vim_starting')
  set nocompatible
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle'))

NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }

" Favourite bundles
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'xolox/vim-misc'
NeoBundle 'tpope/vim-rails'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'int3/vim-extradite'
NeoBundle 'jgdavey/tslime.vim'
NeoBundle 'jgdavey/vim-turbux'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'tpope/vim-surround'
NeoBundle 'xolox/vim-easytags'
"NeoBundle 'Lokaltog/vim-powerline'
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'tpope/vim-cucumber'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'vim-scripts/Align'
NeoBundle 'edsono/vim-matchit'
NeoBundle 'michaeljsmith/vim-indent-object'
NeoBundle 'kana/vim-textobj-user'
NeoBundle 'nelstrom/vim-textobj-rubyblock'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'vim-scripts/Gundo'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'ervandew/supertab'
NeoBundle 'Raimondi/delimitMate'
NeoBundle 'docunext/closetag.vim'
NeoBundle 'kchmck/vim-coffee-script'

NeoBundle 'Shougo/neocomplete'

" Haskell stuff
NeoBundle 'eagletmt/ghcmod-vim'
NeoBundle 'ujihisa/neco-ghc'
NeoBundle 'lukerandall/haskellmode-vim'
NeoBundle 'vim-scripts/haskell.vim'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'pbrisbin/html-template-syntax'
NeoBundle 'Twinside/vim-hoogle'

NeoBundle 'kien/ctrlp.vim'
NeoBundle 'SirVer/ultisnips'
NeoBundle 'honza/vim-snippets'

NeoBundleCheck

" UI customizations
set history=1000
set background=dark
let g:solarized_termcolors=16
let g:solarized_termtrans=1
colorscheme smyck
set t_Co=256

" Powerline fonts is: Menlo regular for Powerline

" Status line configuration
" Remember to clear the powerline cache after changing
" the statusbar:
" :PowerlineClearCache
" Disable powerline cache while developing status line
let g:Powerline_cache_enabled = 0

set laststatus=2                " Always show status line
"set statusline=%<%f\                      " Filename
"set statusline+=%w%h%m%r                  " Options
"set statusline+=%{fugitive#statusline()}  " Git Hotness
"set statusline+=\ [%{&ff}/%Y]             " filetype
"set statusline+=\ [%{getcwd()}]           " current dir
"set statusline+=%=%-14.(L%l,C%c%V%)\ %p%%   " Right aligned file nav info

" Powerline symbols: compatible, unicode, fancy
let g:Powerline_symbols = 'unicode'
" Override for terminals lacking the usual symbols support
"let g:Powerline_dividers_override = ['>>','>','<<','<']

" Easier moving in tabs and windows
map <C-J> <C-W>j<C-W>_
map <C-K> <C-W>k<C-W>_
map <C-L> <C-W>l<C-W>_
map <C-H> <C-W>h<C-W>_

" Yank from the cursor to the EOL, to be consistent with C and D
nnoremap Y y$

set nolist                      " Display unprintable characters F12 switches
set listchars=tab:·\ ,eol:¶,trail:·,extends:»,precedes:« " Unprintable chars mapping
map <leader>ls :set list<cr>
map <leader>nls :set nolist<cr>

" Edit shortcuts
cnoremap %% <C-R>=expand('%:h').'/'<cr>
" Open in window
map <leader>ew :e %%
" Open in split
map <leader>es :sp %%
" Open in vertical split
map <leader>ev :vsp %%
" Open in tab
map <leader>et :tabe %%

" Reload .vimrc
nnoremap <silent> <leader>rs :source ~/.vimrc<CR>
" Edit .vimrc
nnoremap <silent> <leader>ec :e ~/.vimrc<CR>

" ctrlp customizations

" hdevtools customization
au FileType haskell nnoremap <buffer> <F1> :HdevtoolsType<CR>
au FileType haskell nnoremap <buffer> <silent> <F2> :HdevtoolsClear<CR>
au FileType haskell nnoremap <buffer> <silent> <F3> :HdevtoolsInfo<CR>

" syntastic customizations
map <silent> <leader>e :Errors<CR>
map <leader>st :SyntasticToggleMode<CR>

" NerdTree customizations
map <leader>nt :NERDTree<CR>

" Ruby/Rails specs
function! RunSpec(args)
    if exists("b:rails_root") && filereadable(b:rails_root . "/script/spec")
        let spec = b:rails_root . "/script/spec"
    else
        let spec = "rspec"
    end 
    let cmd = ":! " . spec . " % -cfn " . a:args
    execute cmd 
endfunction

" Mappings
" run one rspec example or describe block based on cursor position
map !s :call RunSpec("-l " . <C-r>=line('.')<CR>)
" run full rspec file
map !S :call RunSpec("")

let g:ghc = "/usr/bin/ghc"
let g:haddock_browser = "open"
let g:haddock_browser_callformat = "%s -a Firefox %s"

" Haskellmode vim
au BufEnter *.hs compiler ghc

" GhcMod configuration
"autocmd BufWritePost *.hs GhcModCheckAndLintAsync
" Reload
map <silent> tu :call GHC_BrowseAll()<CR>
" Type lookup
map <silent> tw :call GHC_ShowType(1)<CR>

" TagBar configuration
nmap <leader>= :TagbarToggle<CR>
let g:tagbar_autofocus = 1

" Neocomplete configuration
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
let g:neocomplete#force_overwrite_completefunc = 1

" Define dictionary
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return neocomplete#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction

" <TAB>: completion
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by space.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete_enable_auto_select = 1

" Enable omni completion..
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion
if !exists('g:neocomplete_omni_patterns')
    let g:neocomplete_omni_patterns = {}
endif
"let g:neocomplete_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" neco-ghc
"let $PATH = $PATH . ':' . expand("~/.cabal/bin")

nnoremap <leader>hs :Hoogle 
nnoremap <silent> <leader>hsw :Hoogle <C-R>=expand("<cword>")<cr><cr>
nnoremap <leader>hsi :HoogleInfo
nnoremap <silent> <leader>hsc :HoogleClose<CR>

" This has to be the last line otherwise some plugins
" will fail to recognize filetype, thus preventing
" higlighting and all the neat stuff
filetype plugin indent on

" Comment/Uncomment
autocmd FileType haskell let b:comment_leader = '-- '
autocmd FileType sh,ruby,python let b:comment_leader = '# '
autocmd FileType vim let b:comment_leader = '" '
autocmd FileType conf,fstab let b:comment_leader = '# '
noremap <silent> <leader>cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> <leader>cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>

" Trigger UltiSnip configuration
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"

